/* This script handles communication with decrypted message iframes */

class FrameComm {
	/** Constructor for creating a new FrameComm
	 * @param cryptoManager A CryptoManager object
	*/
	constructor(cryptoManager) {
		this.cryptoManager = cryptoManager;
		this.frameOrigin = 'https://decrypt.grd.me';
		this.FRAME_SECRET = this.cryptoManager.getRandomString(64);
		window.addEventListener('message', this.receiveMessage.bind(this), false);
	}

	/** Receive a message from the decrypted frames
	 * @param event An event generated by message passing
	*/
	receiveMessage(event) {
		try {
			if (event.data.from !== this.frameOrigin) {
				return;
			}
			let data = event.data.encrypted;
			data = CryptoJS.AES.decrypt(data, this.FRAME_SECRET);
			data = data.toString(CryptoJS.enc.Utf8);
			if (!data) {
				return;
			}
			data = JSON.parse(data);
			if (data.id === 'event') {
				if (data.event.type === 'click') {
					document.querySelector(data.event.selector).click();
				} else if (data.event.type === 'submit') {
					document.querySelector(data.event.selector).submit();
				} else {
					$(data.event.selector).trigger(data.event.type);
				}
			} else if (data.id === 'ready') {
				$('[grdMeUID="' + data.uid + '"]').children(':not(iframe[grdMeFrameUID="' + data.uid + '"])').hide();
				$('iframe[grdMeFrameUID="' + data.uid + '"]').show();
				this.msg(data.uid, {id: 'decryptIndicator', decryptIndicator: this.cryptoManager.preferences.decryptIndicator});
				this.msg(data.uid, {id: 'emojis', emojis: this.cryptoManager.preferences.emojis});
			} else if (data.id === 'adjustHeight') {
				$('iframe[grdMeFrameUID="' + data.uid + '"]').height(data.height);
			} else if (data.id === 'click') {
				if (data.target === '_blank') {
					port.postMessage({
						id: 'newTab',
						href: data.href,
					});
				} else {
					window.location.assign(data.href);
				}
			} else if (data.id === 'decrypt') {
				const ciphertext = data.ciphertext;
				const finish = (originalPlaintext) => {
					let plaintext = originalPlaintext;
					if (!plaintext) {
						plaintext = this.cryptoManager.UNABLE_TO_DECRYPT + ' ' + this.cryptoManager.UNABLE_START_TAG + data.ciphertext + this.cryptoManager.UNABLE_END_TAG;
					}
					this.msg(data.uid, {
						id: 'decryptCallback',
						plaintext: plaintext,
						returnId: data.returnId,
					});
				};
				if (ciphertext.charAt(0) === this.cryptoManager.NONCE_CHAR) {
					const hash = ciphertext.slice(1);
					$.ajax({
						url: 'https://grd.me/message/get',
						type: 'GET',
						data: {
							hash: hash,
						},
						success: (data) => {
							if (data && data.status && data.status[0] && !data.status[0].code) {
								for (let i = 0; i < data.messages.length; i++) {
									if ((new CryptoJS.SHA256(data.messages[i].message + data.messages[i].rand)).toString().slice(0, 60) === hash) {
										finish(this.cryptoManager.decryptText(ciphertext));
										return;
									}
								}
								finish(false);
							} else {
								finish(false);
							}
						},
						error: () => {
							finish(false);
						},
					});
				} else {
					finish(this.cryptoManager.decryptText(ciphertext));
				}
			}
		} catch(e) {
			console.log('INFO unable to receive and decrypt message - this usually happens when the message comes from someone other than grd me.', e);
		}
	}

	/** Send a message to a decrypted frame
	 * uid: the uid of the frame
	 * data: the data to send
	*/
	msg(uid, data) {
		if ($('iframe[grdMeFrameUID="' + uid + '"]').get(0) &&
		   !$('iframe[grdMeFrameUID="' + uid + '"]').attr('src').indexOf(this.frameOrigin) &&
		   $('iframe[grdMeFrameUID="' + uid + '"]').get(0).contentWindow) {
			let encryptedText = CryptoJS.AES.encrypt(JSON.stringify(data), this.FRAME_SECRET);
			encryptedText = encryptedText.toString();
			$('iframe[grdMeFrameUID="' + uid + '"]').get(0).contentWindow.postMessage({
				encrypted: encryptedText,
				to: this.frameOrigin,
			}, '*');
		}
	}
}

if (typeof module !== 'undefined' && module.exports) {
	module.exports = FrameComm;
} else {
	window.FrameComm = FrameComm;
}
